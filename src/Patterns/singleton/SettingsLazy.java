package patterns.singleton;

public class SettingsLazy {
    // ЛЕНИВОСТЬ - СТАНДАРТНОЕ ПОНЯТИЕ В ПРОГРАММИРОВАНИИ
    // пример ленивого синглтона
    // это синглтон, который создаёт instance
    // (единственный объект класса) только при
    // первом запросе на этот объект.
    // Это нужно, если объект дорого создавать, а нужен
    // он далеко не всегда.

    private static SettingsLazy instance = null;

    private static SettingsLazy getInstance() {
        // создать объект, если он не создан
        if (instance == null)
            instance = new SettingsLazy();
        return instance;
    }

    private SettingsLazy() {
        // дорогое и долгое создание объекта
    }

    // SettingsLazy в использовании аналогичен Settings
    // но первый не создает объект, если объект не нужен.

    // Такая реализация не потокобезопасна.
    // Для безопасности можно сделать synchronize и двойную проверку, как
    // было в обезьянках. Либо можно enum версию, см. интернет

    // Глобальные переменные, включая сигнлтоны, усложняют логику
    // программы (сложнее отлаживать) и усложняют автоматическую отладку.
}
